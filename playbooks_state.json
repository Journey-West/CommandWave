{"NetExec (nxc) - Initial Windows Enumeration.md": {"filename": "NetExec (nxc) - Initial Windows Enumeration.md", "content": "# NetExec (nxc) - Initial Windows Enumeration Playbook\n\nThis playbook uses NetExec (`nxc`) for initial enumeration tasks against Microsoft Windows targets. Set the required variables like `$TargetIP` in the CommandWave UI. Some commands might benefit from `$UserFile` and `$PassFile` if you have potential credentials.\n\n**Note:** NetExec was formerly CrackMapExec (`cme`). The commands are similar, but ensure you are using the correct binary (`nxc`).\n\n## Step 1: Basic SMB Connectivity & Null Session Check\n\nFirst, check if the target responds on SMB ports (139/445) and if null sessions are enabled. Null sessions allow unauthenticated enumeration.\n\n```bash\n# Basic SMB check against the target IP\nnxc smb $TargetIP\n\n# Explicitly check for null session possibility\nnxc smb $TargetIP -u '' -p ''\n```\n\n* If you see `(+)` symbols, it indicates success (e.g., connection established).\n* Successful null session login (`-u '' -p ''`) is a significant finding.\n\n## Step 2: Enumerate SMB Shares\n\nIf SMB is accessible (especially with a null session), enumerate available shares.\n\n```bash\n# Enumerate shares using null session\nnxc smb $TargetIP -u '' -p '' --shares\n\n# If null session fails, but you have credentials:\n# nxc smb $TargetIP -u <user> -p <password> --shares\n# nxc smb $TargetIP -u ./users.txt -p ./pass.txt --shares # Requires $UserFile/$PassFile set\n```\n\n* Look for shares with permissive access (READ/WRITE for Everyone or Authenticated Users), especially `SYSVOL` and `NETLOGON` on Domain Controllers.\n\n## Step 3: Enumerate Users\n\nAttempt to enumerate domain or local users. SAMR enumeration often requires authentication (even null session sometimes works), while LSA might require higher privileges.\n\n```bash\n# Enumerate users via SAMR (requires auth - null session might work)\nnxc smb $TargetIP -u '' -p '' --users\n\n# Enumerate users via SAMR with known credentials\n# nxc smb $TargetIP -u <user> -p <password> --users\n\n# Attempt LSA secrets dump (requires high privileges on target)\n# nxc smb $TargetIP -u <admin_user> -p <admin_pass> -M lsassy\n```\n\n## Step 4: Enumerate Password Policy\n\nCheck the domain or local password policy. This helps understand password complexity requirements and lockout thresholds.\n\n```bash\n# Get password policy (requires auth - null session might work)\nnxc smb $TargetIP -u '' -p '' --pass-pol\n\n# Get password policy with known credentials\n# nxc smb $TargetIP -u <user> -p <password> --pass-pol\n```\n\n## Step 5: Identify Domain Controllers & Domain Info\n\nIf the target is domain-joined, try to identify domain controllers and gather domain information.\n\n```bash\n# Get domain info (often works with null session)\nnxc smb $TargetIP -u '' -p '' --domain\n\n# Get domain controllers (requires auth)\n# nxc smb $TargetIP -u <user> -p <password> --dc-list\n```\n\n## Step 6: Check SMB Signing\n\nDetermine if SMB signing is required or enabled. If disabled (or not required), the host might be vulnerable to SMB relay attacks.\n\n```bash\n# Check SMB signing status\nnxc smb $TargetIP --gen-relay-list targets.txt\n\n# (Review the targets.txt file - nxc might output signing info directly too)\n# Alternatively, check connection output from Step 1. Look for \"signing:False\".\n```\n\n## Step 7: Further Enumeration Modules\n\nNetExec has many modules. Explore others based on findings.\n\n```bash\n# List available SMB modules\nnxc smb --list-modules\n\n# Example: Enumerate logged-on users (requires privileges)\n# nxc smb $TargetIP -u <user> -p <password> -M loggedon_users\n\n# Example: Enumerate sessions (requires privileges)\n# nxc smb $TargetIP -u <user> -p <password> -M sessions\n```\n\n**Analysis:** Consolidate information gathered from shares, users, policies, and domain details to understand the target environment and plan further actions like targeted credential attacks, vulnerability scanning, or exploitation.\n", "last_modified": 1744680849.8786478, "editor": "client", "terminal_id": "term-7682"}, "05_Playbook_Cross_References.md": {"filename": "05_Playbook_Cross_References.md", "content": "# Playbook Cross-References\n\n## Overview\n\nCommandWave now allows you to create direct references between playbooks, making it easy to build an interconnected knowledge base. This tutorial explains how to use the new cross-referencing feature to create links between related playbooks.\n\n## Creating Playbook References\n\nTo create a link to another playbook, use the special `playbook:` prefix in your markdown links.\n\n### Syntax\n\n```markdown\n[Link Text](playbook:playbook_filename.md)\n```\n\nFor example:\n```markdown\nSee the [Network Setup](playbook:network_setup.md) playbook for more details.\n```\n\nWhen rendered, this creates a special styled button-like link that visually indicates it leads to another playbook.\n\n## Example Usage\n\nHere are some examples of how you might use playbook cross-references:\n\n### Creating a Master Index\n\n```markdown\n# Security Tools Collection\n\n## Reconnaissance\n- [Port Scanner](playbook:port_scanner.md)\n- [DNS Enumeration](playbook:dns_enum.md)\n- [Network Mapping](playbook:network_map.md)\n\n## Exploitation\n- [SQL Injection](playbook:sql_injection.md)\n- [XSS Attacks](playbook:xss_attacks.md)\n\n## Post-Exploitation\n- [Privilege Escalation](playbook:priv_esc.md)\n- [Data Exfiltration](playbook:data_exfil.md)\n```\n\n### Adding References Within Documentation\n\n```markdown\n# Kerberos Authentication\n\n## Prerequisites\nBefore attempting Kerberos authentication, ensure you have:\n1. Domain controller information (see [Active Directory Setup](playbook:ad_setup.md))\n2. Valid domain credentials \n3. Properly configured DNS (see [DNS Configuration](playbook:dns_config.md))\n```\n\n## Benefits of Playbook Cross-References\n\n1. **Improved Organization**: Create logical connections between related content\n2. **Better Navigation**: Quickly jump between relevant playbooks\n3. **Modular Documentation**: Split complex processes into smaller, focused playbooks\n4. **Visual Distinction**: Cross-references are styled differently from regular links\n\n## How It Works\n\nWhen you click a playbook reference link, CommandWave will:\n\n1. Search for the referenced playbook\n2. Load the playbook's content\n3. Display it in the interface\n4. Maintain the original playbook in view (if multiple playbooks are open)\n\n## Advanced Use: Building Knowledge Trees\n\nYou can use cross-references to create hierarchical structures:\n\n```markdown\n# Project Documentation\n\n## Overview\nThis is the root document for the project. Navigate to specific sections:\n\n- [Development Setup](playbook:dev_setup.md)\n- [API Documentation](playbook:api_docs.md)\n- [Deployment Procedures](playbook:deployment.md)\n- [Troubleshooting Guide](playbook:troubleshooting.md)\n```\n\nEach of these playbooks can then contain more specific cross-references, creating a tree-like structure of documentation.\n\n## Style Differences by Theme\n\nThe appearance of playbook references changes based on your selected theme:\n\n- **Cyberpunk Dark**: Cyan/blue glow effect with neon styling\n- **Neon Light**: Modern blue styling with subtle shadow effects\n- **Witch Hazel**: Purple accent color with the theme's signature style\n\n## Try It Yourself\n\nUse the editor to create a new playbook that references other playbooks, or modify existing playbooks to add cross-references. This will help you build a more interconnected and navigable collection of documentation.\n\n```bash\n# This is just a demo command - it doesn't create references directly\necho \"Creating playbook cross-references helps organize your documentation!\"\n```\n", "last_modified": 1744681085.69249, "editor": "client", "terminal_id": "term-7682"}, "03_Custom_Playbooks.md": {"filename": "03_Custom_Playbooks.md", "content": "# CommandWave: Creating Custom Playbooks\n\nThis tutorial will guide you through the process of creating your own custom playbooks to organize and automate your command-line workflows.\n\n## What are Playbooks?\n\nPlaybooks in CommandWave are Markdown files that contain organized collections of commands with explanatory text. They allow you to:\n\n- Document complex command sequences\n- Share knowledge with team members\n- Execute commands directly from the documentation\n- Use variables for flexible automation\n\n## Playbook Structure\n\nA well-structured playbook typically includes:\n\n1. **Title and Description** - What the playbook does\n2. **Sections** - Organized by task or topic (using ## headings)\n3. **Command Blocks** - Executable code sections (using ```bash)\n4. **Documentation** - Explanatory text between commands\n\n## Creating a New Playbook\n\nYou can create playbooks in two ways:\n\n### 1. Using the Create Playbook Button\n\n```bash\n# No command needed - use the interface:\n# 1. Click the \"Create Playbook\" button in the main interface\n# 2. Enter a name for your playbook (must end with .md)\n# 3. Add your content in the editor with proper markdown formatting\n# 4. Click \"Create Playbook\" to save\n```\n\n### 2. Uploading an Existing Markdown File\n\n```bash\n# No command needed - use the interface:\n# 1. Click the \"Upload Playbook\" button\n# 2. Select your Markdown file (.md)\n# 3. The playbook will appear in your list of available playbooks\n```\n\n## Markdown Basics for Playbooks\n\nCommandWave playbooks use standard Markdown syntax:\n\n```bash\n# Create a simple example file to demonstrate markdown\ncat > example.md << EOF\n# Playbook Title\n\n## Section 1\nNormal text goes here\n\n### Subsection\nMore detailed information\n\n\\`\\`\\`bash\n# Your commands go here\necho \"This is a command block\"\n\\`\\`\\`\nEOF\n\n# View the file\ncat example.md\n```\n\n## Code Block Best Practices\n\nFor command blocks to be most effective:\n\n1. Use ```bash for proper syntax highlighting\n2. Include comments to explain complex commands\n3. Keep commands focused on single tasks\n4. Use variables for values that might change (using the proper $varName format)\n\n## Example: Creating a System Info Playbook\n\nLet's create a simple system information playbook as practice:\n\n```bash\n# This would be in a Markdown file, not executed directly\n\n# System Information Playbook\n\n## Basic System Info\n\n### System Overview\n\\`\\`\\`bash\nuname -a\n\\`\\`\\`\n\n### Disk Usage\n\\`\\`\\`bash\ndf -h\n\\`\\`\\`\n\n### Memory Usage\n\\`\\`\\`bash\nfree -m\n\\`\\`\\`\n\n## Process Management\n\n### List Running Processes\n\\`\\`\\`bash\nps aux | grep $PROCESS_NAME\n\\`\\`\\`\n\n### Process Resource Usage\n\\`\\`\\`bash\ntop -n 1\n\\`\\`\\`\n```\n\n## Testing Your Playbook\n\nAfter creating a playbook:\n\n1. Test each command by using the \"Execute\" button\n2. Verify variable substitution is working correctly\n3. Check formatting and readability \n4. Consider adding examples of expected output\n\n## Sharing Playbooks\n\nPlaybooks can be easily shared with your team:\n\n```bash\n# Export your playbooks directory (not executed directly)\n# zip -r commandwave_playbooks.zip /path/to/playbooks\n\n# Import received playbooks via the Upload button\n```\n\n## Advanced Playbook Tips\n\n- Create playbooks for specific workflows or projects\n- Use consistent formatting and structure\n- Include error handling and troubleshooting sections\n- Document dependencies and prerequisites\n", "last_modified": 1744680868.3932106, "editor": "client", "terminal_id": "term-7682"}}